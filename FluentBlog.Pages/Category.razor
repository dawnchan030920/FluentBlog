@page "/category"
@page "/category/{*categoryChainPrimitive}"
@using Fluxor
@using Fluxor.Blazor.Web.Components
@inherits FluxorComponent
@using FluentBlog.Model.Page
@using FluentBlog.Model.Category
@using FluentBlog.Service.Page
@using FluentBlog.Service.Category
@inject IDispatcher Dispatcher
@using FluentBlog.Store.Page.Action
@using FluentBlog.Store.Category
@using FluentBlog.Store.Category.Action
@inject IState<CategoryState> CategoryState
@using Microsoft.Fast.Components.FluentUI
@using FluentBlog.Components.ArticleOverview
@inject NavigationManager NavigationManager

<div style="display: flex;">
	<div style="width: 100%;">
		@if (CategoryState.Value.Category?.Articles is not null)
		{
			<ul style="padding: 0px 12px; list-style: none;">
				@foreach (var overview in CategoryState.Value.Category.Articles)
				{
					<li style="padding: 12px 0px;">
						<ArticleOverview Data="overview"/>
					</li>
				}
			</ul>
		}
		else
		{
			<span style="font-family: var(--bs-body-font-family)">No articles in this category.</span>
		}
</div>
	<aside style="width: auto; margin-right: 12px;">
		<FluentAnchor style="width: 100%;">
			<FluentIcon Name="@FluentIcons.ArrowSplit" Size="IconSize.Size16" Slot="start" Filled=true />
		<span>@($"Subcategories ({(CategoryState.Value.Category?.SubCategories is null ? 0 : CategoryState.Value.Category?.SubCategories.Count)})")</span>
		</FluentAnchor>

		@if (CategoryState.Value.Category?.SubCategories is not null)
		{
			<FluentListbox TValue="string" style="width: 100%; margin-top: 8px;">
				@foreach (var sub in CategoryState.Value.Category.SubCategories)
				{
					<FluentOption TValue="string" @onclick="() => SubCategoryNavigate(sub)">@sub.Name</FluentOption>
				}
			</FluentListbox>
		}
	</aside>
</div>

@code {
	[Parameter]
	public string? CategoryChainPrimitive { get; set; }

	private List<SubPageData>? sub { get; set; }

	private PageData page = PageDataProvider.Datas[PageDataProvider.Category];

	private List<string>? CategoryChain => CategoryChainPrimitive?.Split('/').ToList();

	protected override void OnParametersSet()
	{
		if (CategoryChain is null || CategoryChain.All(s => s == string.Empty))
		{
			Dispatcher.Dispatch(new CategoryChainClearAction());
			Dispatcher.Dispatch(new PageResetAction(page));
		}
		else
		{
			Dispatcher.Dispatch(new CategoryChainSetAction(CategoryChain));
			sub = new List<SubPageData>();
			string baseUrl = "/category";
			foreach (var category in CategoryChain)
			{
				baseUrl += $"/{category}";
				sub.Add(new SubPageData(category, baseUrl));
			}
			Dispatcher.Dispatch(new MainSubPageSetAction(page, sub));
		}

		base.OnParametersSet();
	}

	private void SubCategoryNavigate(CategoryData sub)
	{
		string url = "/category";
		if (sub.CategoryChain is not null)
		{
			foreach (var category in sub.CategoryChain)
			{
				url += $"/{category}";
			}
		}

		NavigationManager.NavigateTo(url);
	}
}